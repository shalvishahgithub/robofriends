{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2OAqCeA,G,MAdF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACxB,OACC,sBAAKC,UAAY,sDAAjB,UACC,qBAAKC,IAAG,+BAA4BF,EAA5B,iBAA+CG,IAAI,WAC3D,gCACC,6BAAKL,IACL,4BAAIC,YCaMK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACA,8BAEEA,EAAOC,KAAK,SAACC,EAAKC,GACjB,OACI,cAAC,EAAD,CAECR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHbS,SCfEC,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACC,qBAAKV,UAAU,MAAf,SACC,uBACCA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCACI,EAPA,SAACC,GACf,OACC,qBAAKC,MAAO,CAAEC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,SAAhE,SACEJ,EAAMK,YCsEKC,G,wDA1Cd,aAAe,IAAD,8BACb,gBAcFC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAdxC,EAAKC,MAAQ,CACZvB,OAAO,GACPK,YAAa,IAJD,E,gEASK,IAAD,OACjBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACpB,OAAO4B,S,+BAM3B,IAAD,OACDC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAC/C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKX,MAAMlB,YAAY4B,kBAGjE,OAA+B,IAA3BH,KAAKP,MAAMvB,OAAOmC,OACd,4CAKN,sBAAKvC,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACG,cAAC,EAAD,CAAWU,aAAcwB,KAAKZ,iBAC9B,cAAC,EAAD,UACF,cAAC,EAAD,CAAUlB,OAAQ6B,a,GAlCNO,cCpBHC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCiCdO,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,eAAe,SAK/CX,M","file":"static/js/main.4dfdf176.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\n// const Card = (props) => {\r\n// \t\treturn( \r\n// \t\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n// \t\t\t\t<img src = {`https://robohash.org/${props.id}?200x200`} alt='robots' />\r\n// \t\t\t\t<div>\r\n// \t\t\t\t\t<h2>{props.name}</h2>\r\n// \t\t\t\t\t<p>{props.email}</p>\r\n// \t\t\t\t</div>\r\n// \t\t\t</div>\r\n\t\t\t\r\n\r\n// \t);\r\n// }\r\n\r\n\r\n\r\n\r\n// we can simplify above props code by what is done in next section\r\n// more easy to uderstand otherwise both code does same things\r\n\r\nconst Card = ({name,email,id}) => {\r\n\t\treturn( \r\n\t\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n\t\t\t\t<img src = {`https://robohash.org/${id}?size=200x200`} alt='robots' />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// const CardList = ({robots}) => {\r\n// \tconst carddetail = robots.map ((user,i) => {\r\n// \t\treturn (\r\n// \t\t <Card\r\n// \t\t key={i} \r\n// \t\t id={robots[i].id} \r\n// \t\t name={robots[i].name} \r\n// \t\t email={robots[i].email}\r\n// \t\t /> \r\n// \t\t );\r\n// \t})\r\n// \treturn(\r\n// \t\t<div>\r\n// \t\t\t{carddetail}\r\n// \t\t</div>\r\n// \t\t);\r\n// }\r\n\r\n// or\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t<div>\r\n\t\t{\r\n\t\t\trobots.map ((user,i) => {\r\n\t\t\t\treturn (\r\n\t\t \t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t \t\tid={robots[i].id} \r\n\t\t\t\t\t\t \t\tname={robots[i].name} \r\n\t\t\t\t\t\t \t\temail={robots[i].email}\r\n\t\t \t\t\t\t\t/> \r\n\t\t \t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t}\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflow:'scroll',border:'2px solid white',height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\nexport default Scroll;","//import React from 'react';\r\nimport React, {Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\n//import {robots} from './robots';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\n\r\n\r\n// const  App = () => {\r\n// \treturn \t(\r\n// \t\t<div className='tc'>\r\n// \t\t\t<h1>RoboFriends</h1>\r\n// \t\t    <SearchBox/>\r\n// \t\t\t<CardList robots={robots}/>\t\r\n// \t\t</div>\r\n// \t);\r\n// }\r\n\r\n\r\n\r\n\r\n// class App extends Component {\r\n// \tconstructor (){\r\n// \t\tsuper()\r\n// \t\tthis.state = {\r\n// \t\t\trobots: robots,\r\n// \t\t\tsearchfield: ''\r\n// \t\t}\r\n\r\n// \t}\r\n\r\nclass App extends Component {\r\n\tconstructor (){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\r\n\t}\r\n\r\ncomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(users=>this.setState({robots:users}));\r\n}\r\n\r\nonSearchChange = (event) => {\r\n\tthis.setState({searchfield: event.target.value})\r\n}\r\n\trender(){\r\n\t\tconst filteredRobots = this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\r\n\t\tif (this.state.robots.length===0){\r\n\t\t\treturn <h1>Loading...</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t\treturn \t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t    <SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t    <Scroll>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\t\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\n//import Hello from './Hello';\n\n//import Card from './Card';\n\n//import CardList from './CardList';\n//import {robots} from './robots';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// ReactDOM.render(<Hello greeting={'Welcome'+' Ninja'} ending={'Good Bye'}/>,\n//   document.getElementById('root')\n\n// ReactDOM.render(\n// \t<div>\n// \t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n// \t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n// \t<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n// \t</div>,\n\n//   document.getElementById('root')\n// );\n\n// ReactDOM.render(\n// \t<CardList robots={robots}/>\t\n// \t,\n\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}